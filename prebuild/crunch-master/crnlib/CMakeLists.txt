
set(LIB_NAME crnlib)


set(CRN_SOURCES
    crnlib.cpp
    crn_arealist.cpp
    crn_assert.cpp
    crn_checksum.cpp
    crn_colorized_console.cpp
    crn_command_line_params.cpp
    crn_comp.cpp
    crn_console.cpp
    crn_core.cpp
    crn_data_stream.cpp
    crn_dds_comp.cpp
    crn_decomp.cpp
    crn_dxt.cpp
    crn_dxt1.cpp
    crn_dxt5a.cpp
    crn_dxt_endpoint_refiner.cpp
    crn_dxt_fast.cpp
    crn_dxt_hc.cpp
    crn_dxt_hc_common.cpp
    crn_dxt_image.cpp
    crn_dynamic_string.cpp
    crn_etc.cpp
    crn_file_utils.cpp
    crn_find_files.cpp
    crn_hash.cpp
    crn_hash_map.cpp
    crn_huffman_codes.cpp
    crn_image_utils.cpp
    crn_jpgd.cpp
    crn_jpge.cpp
    crn_ktx_texture.cpp
    crn_lzma_codec.cpp
    crn_math.cpp
    crn_mem.cpp
    crn_miniz.cpp
    crn_mipmapped_texture.cpp
    crn_pixel_format.cpp
    crn_platform.cpp
    crn_prefix_coding.cpp
    crn_qdxt1.cpp
    crn_qdxt5.cpp
    crn_rand.cpp
    crn_resampler.cpp
    crn_resample_filters.cpp
    crn_rg_etc1.cpp
    crn_ryg_dxt.cpp
    crn_sparse_bit_array.cpp
    crn_stb_image.cpp
    crn_strutils.cpp
    crn_symbol_codec.cpp
    crn_texture_comp.cpp
    crn_texture_conversion.cpp
    crn_texture_file_types.cpp
    crn_threaded_resampler.cpp
    # crn_threading_pthreads.cpp
    # crn_threading_win32.cpp
    crn_timer.cpp
    crn_utils.cpp
    crn_value.cpp
    crn_vector.cpp
    crn_zeng.cpp
    # lzham_timer.cpp
    # lzham_win32_threading.cpp
    lzma_7zBuf.cpp
    lzma_7zBuf2.cpp
    lzma_7zCrc.cpp
    lzma_7zFile.cpp
    lzma_7zStream.cpp
    lzma_Alloc.cpp
    lzma_Bcj2.cpp
    lzma_Bra.cpp
    lzma_Bra86.cpp
    lzma_BraIA64.cpp
    lzma_LzFind.cpp
    # lzma_LzFindMt.cpp
    lzma_LzmaDec.cpp
    lzma_LzmaEnc.cpp
    lzma_LzmaLib.cpp
    # lzma_Threads.cpp
)

if(WIN32)
set(CRN_SOURCES ${CRN_SOURCES} crn_threading_win32.cpp lzma_Threads.cpp lzma_LzFindMt.cpp)
else(WIN32)
set(CRN_SOURCES ${CRN_SOURCES} crn_threading_pthreads.cpp )
endif(WIN32)


if(CRUNCH_BUILD_SHARED)
	add_library(${LIB_NAME} SHARED ${CRN_SOURCES} )
else(CRUNCH_BUILD_SHARED)
	add_library(${LIB_NAME} STATIC ${CRN_SOURCES} )
endif(CRUNCH_BUILD_SHARED)

set_target_properties( ${LIB_NAME} PROPERTIES OUTPUT_NAME ${LIB_NAME}
                        DEBUG_OUTPUT_NAME ${LIB_NAME}d )

install(TARGETS ${LIB_NAME}
    RUNTIME DESTINATION bin
    ARCHIVE DESTINATION lib
    LIBRARY DESTINATION lib)
install(FILES ${CMAKE_SOURCE_DIR}/inc/crn_decomp.h DESTINATION include/)
install(FILES ${CMAKE_SOURCE_DIR}/inc/crnlib.h DESTINATION include/)
install(FILES ${CMAKE_SOURCE_DIR}/inc/dds_defs.h DESTINATION include/)

    
# add_custom_target(uninstall COMMAND ${CMAKE_COMMAND} -P ${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake)
