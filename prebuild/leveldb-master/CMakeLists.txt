cmake_minimum_required(VERSION 2.8)
PROJECT(leveldb)

ENABLE_TESTING()

set(VERSION_MAJOR 1)
set(VERSION_MINOR 15)
set(VERRION_PATCH 0)
set(VERSION_STRING ${VERSION_MAJOR}.${VERSION_MINOR})

include_directories(${CMAKE_CURRENT_SOURCE_DIR} include)

# Set a default build type for single-configuration
# CMake generators if no build type is set.
if(NOT CMAKE_CONFIGURATION_TYPES AND NOT CMAKE_BUILD_TYPE)
  set(CMAKE_BUILD_TYPE RELEASE)
  #set(CMAKE_BUILD_TYPE DEBUG)
endif()

message("Configuration: ${CMAKE_BUILD_TYPE}")

# set postfix
SET(CMAKE_DEBUG_POSTFIX "d" CACHE STRING "add a postfix, usually d on windows")
SET(CMAKE_RELEASE_POSTFIX "" CACHE STRING "add a postfix, usually empty on windows")
SET(CMAKE_RELWITHDEBINFO_POSTFIX "rd" CACHE STRING "add a postfix, usually empty on windows")
SET(CMAKE_MINSIZEREL_POSTFIX "s" CACHE STRING "add a postfix, usually empty on windows")


## needs define:
## 	COMPILER_MSVC
## 	LEVELDB_PLATFORM_POSIX
## 	LEVELDB_CSTDATOMIC_PRESENT
## 	SNAPPY
## 	OS_****

if(WIN32 AND MSVC)
  add_definitions(-DOS_WIN)
  add_definitions(-DLEVELDB_PLATFORM_WINDOWS)
  add_definitions(-DCOMPILER_MSVC)

  add_definitions(-DWINVER=0x0501 -DWIN32_LEAN_AND_MEAN -DNOMINMAX -D_CRT_SECURE_NO_WARNINGS -D_CRT_NONSTDC_NO_WARNINGS)
  add_definitions(-Dssize_t=ptrdiff_t) #workaround for ssize_t

  set(PORT_SRCS port/port_win.cc util/env_win.cc util/win_logger.cc)
  set(PORT_HDRS port/port_win.h port/win/stdint.h util/win_logger.h)
  
if( MSVC_VERSION LESS 1900)
  include_directories(port/win) #workaround for stdint.h
endif( MSVC_VERSION LESS 1900)

#  set(CAPI_SRC db/c.cc)
#  set(CAPI_HDRS include/leveldb/c.h)
  set(CAPI_SRC)
  set(CAPI_HDRS)
  set(CAPI_TEST)

  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /W3 /Oi /EHsc")
  #set(CMAKE_CXX_FLAGS_RELEASE "/O2 /Ob2 /DNDEBUG /MD")
  set(CMAKE_CXX_FLAGS_RELEASE "/Ox /Ob2 /Ot /DNDEBUG /MD")
  set(CMAKE_CXX_FLAGS_DEBUG "/Od /Zi /Ob0 /RTC1 /D_DEBUG /MDd")

  set(LIBS "${LIBS}" shlwapi)

elseif(${CMAKE_SYSTEM_NAME} MATCHES "Linux" AND CMAKE_COMPILER_IS_GNUCXX)
  add_definitions(-DOS_LINUX)
  add_definitions(-DLEVELDB_PLATFORM_POSIX)

  add_definitions(-fno-builtin-memcmp)

  set(PORT_SRCS port/port_posix.cc util/env_posix.cc)
  set(PORT_HDRS port/port_posix.h util/posix_logger.h)

  set(CAPI_SRC db/c.cc)
  set(CAPI_HDRS include/leveldb/c.h)
  set(CAPI_TEST db/c_test.c)

  set(CMAKE_CXX_FLAGS_RELEASE "-O2 -DNDEBUG")
  set(CMAKE_CXX_FLAGS_DEBUG "-g")

elseif(ANDROID)
    add_definitions(-D__ARMEL__)
    # add_definitions(-D__GNUC__)
    
    # add_definitions(-DOS_LINUX)
    add_definitions(-DOS_ANDROID)
    add_definitions(-DLEVELDB_PLATFORM_POSIX)

    add_definitions(-fno-builtin-memcmp)

    set(PORT_SRCS port/port_posix.cc util/env_posix.cc)
    set(PORT_HDRS port/port_posix.h util/posix_logger.h)

    set(CAPI_SRC db/c.cc)
    set(CAPI_HDRS include/leveldb/c.h)
    set(CAPI_TEST db/c_test.c)

    set(CMAKE_CXX_FLAGS_RELEASE "-O2 -DNDEBUG")
    set(CMAKE_CXX_FLAGS_DEBUG "-g")
  
else()
  error("Unknown platform")
endif()


###
# embedded snappy
###
add_definitions(-DSNAPPY)
include_directories(snappy)
set(SNAPPY_SRCS
  snappy/snappy.cc
  snappy/snappy-sinksource.cc
  snappy/snappy-stubs-internal.cc
  )
set(SNAPPY_HDRS
  snappy/snappy.h
  snappy/snappy-internal.h
  snappy/snappy-sinksource.h
  snappy/snappy-stubs-internal.h
  snappy/snappy-stubs-public.h
  )

set(SRCS
  db/builder.cc
  db/db_impl.cc
  db/db_iter.cc
  db/dbformat.cc
  db/filename.cc
  db/log_reader.cc
  db/log_writer.cc
  db/memtable.cc
  db/repair.cc
  db/table_cache.cc
  db/version_edit.cc
  db/version_set.cc
  db/write_batch.cc
  helpers/memenv/memenv.cc
  table/block_builder.cc
  table/block.cc
  table/filter_block.cc
  table/format.cc
  table/iterator.cc
  table/merger.cc
  table/table_builder.cc
  table/table.cc
  table/two_level_iterator.cc
  util/arena.cc
  util/bloom.cc
  util/cache.cc
  util/coding.cc
  util/comparator.cc
  util/crc32c.cc
  util/env.cc
  util/filter_policy.cc
  util/hash.cc
  util/histogram.cc
  util/logging.cc
  util/options.cc
  util/status.cc
  ${PORT_SRCS}
  ${CAPI_SRC}
  )

set(HDRS
  db/builder.h
  db/db_impl.h
  db/db_iter.h
  db/dbformat.h
  db/filename.h
  db/log_format.h
  db/log_reader.h
  db/log_writer.h
  db/memtable.h
  db/skiplist.h
  db/snapshot.h
  db/table_cache.h
  db/version_edit.h
  db/version_set.h
  db/write_batch_internal.h
  helpers/memenv/memenv.h
  include/leveldb/cache.h
  include/leveldb/comparator.h
  include/leveldb/db.h
  include/leveldb/env.h
  include/leveldb/filter_policy.h
  include/leveldb/iterator.h
  include/leveldb/options.h
  include/leveldb/slice.h
  include/leveldb/status.h
  include/leveldb/table.h
  include/leveldb/table_builder.h
  include/leveldb/write_batch.h
  port/atomic_pointer.h
  port/port.h
  port/thread_annotations.h
  table/block.h
  table/block_builder.h
  table/filter_block.h
  table/format.h
  table/iterator_wrapper.h
  table/merger.h
  table/two_level_iterator.h
  util/arena.h
  util/coding.h
  util/crc32c.h
  util/hash.h
  util/histogram.h
  util/logging.h
  util/mutexlock.h
  util/random.h
  ${PORT_HDRS}
  ${CAPI_HDRS}
  )

OPTION(LEVELDB_BUILD_STATIC "Enable build static library" ON)
find_package(Threads)

set(LIB_NAME "")

if(LEVELDB_BUILD_STATIC)

    add_library(leveldb_static STATIC ${SRCS} ${HDRS} ${SNAPPY_SRCS} ${SNAPPY_HDRS})
    SET_TARGET_PROPERTIES(leveldb_static PROPERTIES DEBUG_POSTFIX ${CMAKE_DEBUG_POSTFIX})
    target_link_libraries(leveldb_static ${CMAKE_THREAD_LIBS_INIT} ${LIBS})
	set(LIB_NAME leveldb_static)
	
else(LEVELDB_BUILD_STATIC)

    add_library(leveldb SHARED ${SRCS} ${HDRS} ${SNAPPY_SRCS} ${SNAPPY_HDRS})
    SET_TARGET_PROPERTIES(leveldb PROPERTIES DEBUG_POSTFIX ${CMAKE_DEBUG_POSTFIX})
    set_target_properties(leveldb PROPERTIES
      VERSION ${VERSION_STRING}
      SOVERSION ${VERSION_MAJOR}
      )
    target_link_libraries(leveldb ${CMAKE_THREAD_LIBS_INIT} ${LIBS})
	set(LIB_NAME leveldb)
	
endif(LEVELDB_BUILD_STATIC)

###
# TESTS
###

set(TESTHARNESS_SRCS
  util/testutil.cc
  util/testharness.cc
)
set(TESTHARNESS_HDRS
  util/testutil.h
  util/testharness.h
)

add_library(leveldb-testharness STATIC ${TESTHARNESS_SRCS})
SET_TARGET_PROPERTIES(leveldb-testharness PROPERTIES DEBUG_POSTFIX ${CMAKE_DEBUG_POSTFIX})

macro(leveldb_tests)
  foreach(t ${ARGN})
    get_filename_component(_tname ${t} NAME_WE)
    add_executable(${_tname} ${t})
    target_link_libraries(${_tname}
      leveldb-testharness
      # leveldb_static
	  ${LIB_NAME}
      )
    add_test(NAME ${_tname}
      COMMAND $<TARGET_FILE:${_tname}>)
  endforeach()
endmacro()

leveldb_tests(
  util/arena_test.cc
  db/autocompact_test.cc
  util/bloom_test.cc
  ${CAPI_TEST}
  util/cache_test.cc
  util/coding_test.cc
  db/corruption_test.cc
  util/crc32c_test.cc
  db/db_test.cc
  db/dbformat_test.cc
  util/env_test.cc
  db/filename_test.cc
  table/filter_block_test.cc
  issues/issue178_test.cc
  issues/issue200_test.cc
  db/log_test.cc
  db/skiplist_test.cc
  table/table_test.cc
  db/version_edit_test.cc
  db/version_set_test.cc
  db/write_batch_test.cc
  db/db_bench.cc
  helpers/memenv/memenv_test.cc
)

# TODO: memenv_test


# Installations
# Note the trailing slash in the argument to the `DIRECTORY' directive
install(DIRECTORY ${PROJECT_SOURCE_DIR}/include/
  DESTINATION ${CMAKE_INSTALL_PREFIX}/include/
  PATTERN "internal" EXCLUDE
)

if(LEVELDB_BUILD_STATIC)
install(TARGETS leveldb_static
  RUNTIME DESTINATION ${CMAKE_INSTALL_PREFIX}/bin
  LIBRARY DESTINATION ${CMAKE_INSTALL_PREFIX}/lib
  ARCHIVE DESTINATION ${CMAKE_INSTALL_PREFIX}/lib
)
else(LEVELDB_BUILD_STATIC)
install(TARGETS leveldb
  RUNTIME DESTINATION ${CMAKE_INSTALL_PREFIX}/bin
  LIBRARY DESTINATION ${CMAKE_INSTALL_PREFIX}/lib
  ARCHIVE DESTINATION ${CMAKE_INSTALL_PREFIX}/lib
)
endif(LEVELDB_BUILD_STATIC)



