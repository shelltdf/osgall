#usda 1.0
(
    endTimeCode = 3
    framesPerSecond = 24
    metersPerUnit = 1
    startTimeCode = 1
    timeCodesPerSecond = 24
    upAxis = "Y"
)

def Xform "geo1" (
    kind = "group"
)
{
    matrix4d xformOp:transform:transform1.timeSamples = {
        1: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (3, 0, 0, 1) ),
        2: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (3, 0.041666666666666664, 0, 1) ),
        3: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (3, 0.08333333333333333, 0, 1) ),
    }
    uniform token[] xformOpOrder = ["xformOp:transform:transform1"]

    def Sphere "sphere1" (
        kind = "component"
	prepend apiSchemas = ["GeomModelAPI"]
    )
    {
	uniform token model:drawMode = "bounds"
	uniform bool model:applyDrawMode = true
        float3[] extent.timeSamples = {
            1: [(-1, -1, -1), (1, 1, 1)],
            2: [(-1.0416666, -1.0416666, -1.0416666), (1.0416666, 1.0416666, 1.0416666)],
            3: [(-1.0833334, -1.0833334, -1.0833334), (1.0833334, 1.0833334, 1.0833334)],
        }
        double radius.timeSamples = {
            1: 1,
            2: 1.0416666269302368,
            3: 1.0833333730697632,
        }
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }
}

def Xform "geo2" (
    kind = "component"
    prepend apiSchemas = ["GeomModelAPI"]
)
{
    uniform token model:drawMode = "bounds"
    uniform bool model:applyDrawMode = true
    custom vector3f[] extentsHint
    vector3f[] extentsHint.timeSamples = {
        1: [(-1, -1, -1), (1, 1, 1)],
        2: [(-1.0416666, -1.0416666, -1.0416666), (1.0416666, 1.0416666, 1.0416666)],
        3: [(-1.0833334, -1.0833334, -1.0833334), (1.0833334, 1.0833334, 1.0833334)],
    }
    matrix4d xformOp:transform:transform2.timeSamples = {
        1: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
        2: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0.041666666666666664, 0, 1) ),
        3: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0.08333333333333333, 0, 1) ),
    }
    uniform token[] xformOpOrder = ["xformOp:transform:transform2"]

    def Sphere "sphere1"
    {
        double radius.timeSamples = {
            1: 1,
            2: 1.0416666269302368,
            3: 1.0833333730697632,
        }
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

}

