--- openexr/IlmBase/Half/half.cpp	2020-08-12 16:12:07.000000000 -0700
+++ ilmbase_half.cpp	2020-10-28 14:57:12.094863000 -0700
@@ -45,18 +45,27 @@
 //---------------------------------------------------------------------------
 
 #include <assert.h>
-#include "half.h"
+
+#include "pxr/pxr.h"
+#include "pxr/base/gf/ilmbase_half.h"
+
+#include <istream>
+#include <ostream>
 
 using namespace std;
 
+PXR_NAMESPACE_OPEN_SCOPE
+
+namespace pxr_half {
+
 //-------------------------------------------------------------
 // Lookup tables for half-to-float and float-to-half conversion
 //-------------------------------------------------------------
 
-HALF_EXPORT const half::uif half::_toFloat[1 << 16] =
-    #include "toFloat.h"
-HALF_EXPORT const unsigned short half::_eLut[1 << 9] =
-    #include "eLut.h"
+GF_API const half::uif half::_toFloat[1 << 16] =
+    #include "pxr/base/gf/ilmbase_toFloat.h"
+GF_API const unsigned short half::_eLut[1 << 9] =
+    #include "pxr/base/gf/ilmbase_eLut.h"
 
 //-----------------------------------------------
 // Overflow handler for float-to-half conversion;
@@ -64,7 +73,7 @@
 // which may be trapped by the operating system.
 //-----------------------------------------------
 
-HALF_EXPORT float
+GF_API float
 half::overflow ()
 {
     volatile float f = 1e10;
@@ -81,7 +90,7 @@
 // zeroes, denormalized numbers and exponent overflows.
 //-----------------------------------------------------
 
-HALF_EXPORT short
+GF_API short
 half::convert (int i)
 {
     //
@@ -108,7 +117,7 @@
 	{
 	    //
 	    // E is less than -10.  The absolute value of f is
-	    // less than HALF_MIN (f may be a small normalized
+	    // less than PXR_HALF_MIN (f may be a small normalized
 	    // float, a denormalized float or a zero).
 	    //
 	    // We convert f to a half zero with the same sign as f.
@@ -119,7 +128,7 @@
 
 	//
 	// E is between -10 and 0.  F is a normalized float
-	// whose magnitude is less than HALF_NRM_MIN.
+	// whose magnitude is less than PXR_HALF_NRM_MIN.
 	//
 	// We convert f to a denormalized half.
 	//
@@ -221,7 +230,7 @@
 // Stream I/O operators
 //---------------------
 
-HALF_EXPORT ostream &
+GF_API ostream &
 operator << (ostream &os, half h)
 {
     os << float (h);
@@ -229,7 +238,7 @@
 }
 
 
-HALF_EXPORT istream &
+GF_API istream &
 operator >> (istream &is, half &h)
 {
     float f;
@@ -244,7 +253,7 @@
 // floats and halfs, mostly for debugging
 //---------------------------------------
 
-HALF_EXPORT void
+GF_API void
 printBits (ostream &os, half h)
 {
     unsigned short b = h.bits();
@@ -259,7 +268,7 @@
 }
 
 
-HALF_EXPORT void
+GF_API void
 printBits (ostream &os, float f)
 {
     half::uif x;
@@ -275,7 +284,7 @@
 }
 
 
-HALF_EXPORT void
+GF_API void
 printBits (char c[19], half h)
 {
     unsigned short b = h.bits();
@@ -292,7 +301,7 @@
 }
 
 
-HALF_EXPORT void
+GF_API void
 printBits (char c[35], float f)
 {
     half::uif x;
@@ -308,3 +317,7 @@
 
     c[34] = 0;
 }
+
+} // namespace pxr_half
+
+PXR_NAMESPACE_CLOSE_SCOPE
--- openexr/IlmBase/Half/half.h	2020-08-12 16:12:07.000000000 -0700
+++ ilmbase_half.h	2020-10-28 14:55:23.327871000 -0700
@@ -82,11 +82,17 @@
 //
 //---------------------------------------------------------------------------
 
-#ifndef _HALF_H_
-#define _HALF_H_
+#ifndef PXR_HALF_H
+#define PXR_HALF_H
 
-#include "halfExport.h"    // for definition of HALF_EXPORT
-#include <iostream>
+#include "pxr/pxr.h"
+#include "pxr/base/gf/api.h"
+
+#include <iosfwd>
+
+PXR_NAMESPACE_OPEN_SCOPE
+
+namespace pxr_half {
 
 class half
 {
@@ -100,8 +106,8 @@
     half (float f);
     // rule of 5
     ~half () = default;
-    half (const half &) = default;
-    half (half &&) noexcept = default;
+    constexpr half (const half &) noexcept = default;
+    constexpr half (half &&) noexcept = default;
 
     //--------------------
     // Conversion to float
@@ -201,8 +207,8 @@
     // Access to the internal representation
     //--------------------------------------
 
-    HALF_EXPORT unsigned short	bits () const;
-    HALF_EXPORT void		setBits (unsigned short bits);
+    GF_API unsigned short	bits () const;
+    GF_API void		setBits (unsigned short bits);
 
 
   public:
@@ -215,13 +221,13 @@
 
   private:
 
-    HALF_EXPORT static short                  convert (int i);
-    HALF_EXPORT static float                  overflow ();
+    GF_API static short                  convert (int i);
+    GF_API static float                  overflow ();
 
     unsigned short                            _h;
 
-    HALF_EXPORT static const uif              _toFloat[1 << 16];
-    HALF_EXPORT static const unsigned short   _eLut[1 << 9];
+    GF_API static const uif              _toFloat[1 << 16];
+    GF_API static const unsigned short   _eLut[1 << 9];
 };
 
 
@@ -230,81 +236,81 @@
 // Stream I/O
 //-----------
 
-HALF_EXPORT std::ostream &      operator << (std::ostream &os, half  h);
-HALF_EXPORT std::istream &      operator >> (std::istream &is, half &h);
+GF_API std::ostream &      operator << (std::ostream &os, half  h);
+GF_API std::istream &      operator >> (std::istream &is, half &h);
 
 
 //----------
 // Debugging
 //----------
 
-HALF_EXPORT void        printBits   (std::ostream &os, half  h);
-HALF_EXPORT void        printBits   (std::ostream &os, float f);
-HALF_EXPORT void        printBits   (char  c[19], half  h);
-HALF_EXPORT void        printBits   (char  c[35], float f);
+GF_API void        printBits   (std::ostream &os, half  h);
+GF_API void        printBits   (std::ostream &os, float f);
+GF_API void        printBits   (char  c[19], half  h);
+GF_API void        printBits   (char  c[35], float f);
 
 
 //-------------------------------------------------------------------------
 // Limits
 //
-// Visual C++ will complain if HALF_MIN, HALF_NRM_MIN etc. are not float
+// Visual C++ will complain if PXR_HALF_MIN, PXR_HALF_NRM_MIN etc. are not float
 // constants, but at least one other compiler (gcc 2.96) produces incorrect
 // results if they are.
 //-------------------------------------------------------------------------
 
 #if (defined _WIN32 || defined _WIN64) && defined _MSC_VER
 
-  #define HALF_MIN	5.96046448e-08f	// Smallest positive half
+  #define PXR_HALF_MIN	5.96046448e-08f	// Smallest positive half
 
-  #define HALF_NRM_MIN	6.10351562e-05f	// Smallest positive normalized half
+  #define PXR_HALF_NRM_MIN	6.10351562e-05f	// Smallest positive normalized half
 
-  #define HALF_MAX	65504.0f	// Largest positive half
+  #define PXR_HALF_MAX	65504.0f	// Largest positive half
 
-  #define HALF_EPSILON	0.00097656f	// Smallest positive e for which
+  #define PXR_HALF_EPSILON	0.00097656f	// Smallest positive e for which
 					// half (1.0 + e) != half (1.0)
 #else
 
-  #define HALF_MIN	5.96046448e-08	// Smallest positive half
+  #define PXR_HALF_MIN	5.96046448e-08	// Smallest positive half
 
-  #define HALF_NRM_MIN	6.10351562e-05	// Smallest positive normalized half
+  #define PXR_HALF_NRM_MIN	6.10351562e-05	// Smallest positive normalized half
 
-  #define HALF_MAX	65504.0		// Largest positive half
+  #define PXR_HALF_MAX	65504.0		// Largest positive half
 
-  #define HALF_EPSILON	0.00097656	// Smallest positive e for which
+  #define PXR_HALF_EPSILON	0.00097656	// Smallest positive e for which
 					// half (1.0 + e) != half (1.0)
 #endif
 
 
-#define HALF_MANT_DIG	11		// Number of digits in mantissa
+#define PXR_HALF_MANT_DIG	11		// Number of digits in mantissa
 					// (significand + hidden leading 1)
 
 // 
-// floor( (HALF_MANT_DIG - 1) * log10(2) ) => 3.01... -> 3
-#define HALF_DIG	3		// Number of base 10 digits that
+// floor( (PXR_HALF_MANT_DIG - 1) * log10(2) ) => 3.01... -> 3
+#define PXR_HALF_DIG	3		// Number of base 10 digits that
 					// can be represented without change
 
-// ceil(HALF_MANT_DIG * log10(2) + 1) => 4.31... -> 5
-#define HALF_DECIMAL_DIG	5	// Number of base-10 digits that are
+// ceil(PXR_HALF_MANT_DIG * log10(2) + 1) => 4.31... -> 5
+#define PXR_HALF_DECIMAL_DIG	5	// Number of base-10 digits that are
 					// necessary to uniquely represent all
 					// distinct values
 
-#define HALF_RADIX	2		// Base of the exponent
+#define PXR_HALF_RADIX	2		// Base of the exponent
 
-#define HALF_MIN_EXP	-13		// Minimum negative integer such that
-					// HALF_RADIX raised to the power of
+#define PXR_HALF_MIN_EXP	-13		// Minimum negative integer such that
+					// PXR_HALF_RADIX raised to the power of
 					// one less than that integer is a
 					// normalized half
 
-#define HALF_MAX_EXP	16		// Maximum positive integer such that
-					// HALF_RADIX raised to the power of
+#define PXR_HALF_MAX_EXP	16		// Maximum positive integer such that
+					// PXR_HALF_RADIX raised to the power of
 					// one less than that integer is a
 					// normalized half
 
-#define HALF_MIN_10_EXP	-4		// Minimum positive integer such
+#define PXR_HALF_MIN_10_EXP	-4		// Minimum positive integer such
 					// that 10 raised to that power is
 					// a normalized half
 
-#define HALF_MAX_10_EXP	4		// Maximum positive integer such
+#define PXR_HALF_MAX_10_EXP	4		// Maximum positive integer such
 					// that 10 raised to that power is
 					// a normalized half
 
@@ -746,4 +752,8 @@
     _h = bits;
 }
 
+} // namespace pxr_half
+
+PXR_NAMESPACE_CLOSE_SCOPE
+
 #endif
--- openexr/IlmBase/Half/halfLimits.h	2020-08-12 16:12:07.000000000 -0700
+++ ilmbase_halfLimits.h	2020-10-28 14:56:06.167891000 -0700
@@ -38,8 +38,8 @@
 //     Rod Bogart <rgb@ilm.com>
 
 
-#ifndef INCLUDED_HALF_LIMITS_H
-#define INCLUDED_HALF_LIMITS_H
+#ifndef PXR_HALF_LIMITS_H
+#define PXR_HALF_LIMITS_H
 
 
 //------------------------------------------------------------------------
@@ -49,33 +49,36 @@
 //------------------------------------------------------------------------
 
 #include <limits>
-#include "half.h"
+#include "pxr/base/gf/ilmbase_half.h"
 
 namespace std {
 
 template <>
-class numeric_limits <half>
+class numeric_limits <PXR_NS::pxr_half::half>
 {
+  private:
+    using half = PXR_NS::pxr_half::half;  
+  
   public:
 
     static const bool is_specialized = true;
 
-    static half min () throw () {return HALF_NRM_MIN;}
-    static half max () throw () {return HALF_MAX;}
+    static half min () throw () {return PXR_HALF_NRM_MIN;}
+    static half max () throw () {return PXR_HALF_MAX;}
 
-    static const int digits = HALF_MANT_DIG;
-    static const int digits10 = HALF_DIG;
+    static const int digits = PXR_HALF_MANT_DIG;
+    static const int digits10 = PXR_HALF_DIG;
     static const bool is_signed = true;
     static const bool is_integer = false;
     static const bool is_exact = false;
-    static const int radix = HALF_RADIX;
-    static half epsilon () throw () {return HALF_EPSILON;}
-    static half round_error () throw () {return HALF_EPSILON / 2;}
-
-    static const int min_exponent = HALF_MIN_EXP;
-    static const int min_exponent10 = HALF_MIN_10_EXP;
-    static const int max_exponent = HALF_MAX_EXP;
-    static const int max_exponent10 = HALF_MAX_10_EXP;
+    static const int radix = PXR_HALF_RADIX;
+    static half epsilon () throw () {return PXR_HALF_EPSILON;}
+    static half round_error () throw () {return PXR_HALF_EPSILON / 2;}
+
+    static const int min_exponent = PXR_HALF_MIN_EXP;
+    static const int min_exponent10 = PXR_HALF_MIN_10_EXP;
+    static const int max_exponent = PXR_HALF_MAX_EXP;
+    static const int max_exponent10 = PXR_HALF_MAX_10_EXP;
 
     static const bool has_infinity = true;
     static const bool has_quiet_NaN = true;
@@ -85,7 +88,7 @@
     static half infinity () throw () {return half::posInf();}
     static half quiet_NaN () throw () {return half::qNan();}
     static half signaling_NaN () throw () {return half::sNan();}
-    static half denorm_min () throw () {return HALF_MIN;}
+    static half denorm_min () throw () {return PXR_HALF_MIN;}
 
     static const bool is_iec559 = false;
     static const bool is_bounded = false;
@@ -98,8 +101,8 @@
 #if __cplusplus >= 201103L
 
     // C++11 additions.
-    static constexpr int max_digits10 = HALF_DECIMAL_DIG;
-    static half lowest () {return -HALF_MAX;}
+    static constexpr int max_digits10 = PXR_HALF_DECIMAL_DIG;
+    static half lowest () {return -PXR_HALF_MAX;}
 
 #endif
 
