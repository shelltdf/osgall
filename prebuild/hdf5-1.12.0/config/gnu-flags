#                            -*- shell-script -*-
#
# Copyright by The HDF Group.
# Copyright by the Board of Trustees of the University of Illinois.
# All rights reserved.
#
# This file is part of HDF5.  The full HDF5 copyright notice, including
# terms governing use, modification, and redistribution, is contained in
# the COPYING file, which can be found at the root of the source code
# distribution tree, or in https://support.hdfgroup.org/ftp/HDF5/releases.
# If you do not have access to either file, you may request a copy from
# help@hdfgroup.org.


# This file should be sourced into configure if the compiler is the
# GNU gcc compiler or a derivative.  It is careful not to do anything
# if the compiler is not GNU; otherwise 'cc_flags_set' is set to 'yes'
#

#
# Prepend `$srcdir/config/gnu-` to the filename suffix(es) given as
# subroutine argument(s), remove comments starting with # and ending
# at EOL, replace spans of whitespace (including newlines) with spaces,
# and re-emit the file(s) thus filtered on the standard output stream.
#
load_gcc_arguments()
{
    set -- $(for arg; do
        sed 's,#.*$,,' $srcdir/config/gnu-${arg}
    done)
    IFS=' ' echo "$*"
}


# Get the compiler version in a way that works for gcc
# unless a compiler version is already known
#
#   cc_vendor:    The compiler name: gcc
#   cc_version:   Version number: 2.91.60, 2.7.2.1
#
if test "X-" = "X-$cc_flags_set"; then
    # PathScale compiler spits out gcc version string too. Need to
    # filter it out.
    # icc beginning with version 12 includes a "gcc version compatiblilty"
    # string, causing the gcc H5_CFLAGS to be erroneously added.  The line
    # "grep -v 'icc version'" causes the discarding of any output
    # containing 'icc version'.  The cc_version for icc is correctly determined
    # and flags added in the intel-flags script.
    cc_version="`$CC $CFLAGS $H5_CFLAGS -v 2>&1 | grep -v 'PathScale' |\
        grep -v '^icc.*version' |\
        grep 'gcc version' | sed 's/.*gcc version \([-a-z0-9\.]*\).*/\1/'`"
    cc_vendor=`echo $cc_version |sed 's/\([a-z]*\).*/\1/'`
    cc_version=`echo $cc_version |sed 's/[-a-z]//g'`
    if test X = "X$cc_vendor" -a X != "X$cc_version"; then
        cc_vendor=gcc
    fi
    if test "-" != "$cc_vendor-$cc_version"; then
        echo "compiler '$CC' is GNU $cc_vendor-$cc_version"
    fi

    # Get the compiler version numbers
    cc_vers_major=`echo $cc_version | cut -f1 -d.`
    cc_vers_minor=`echo $cc_version | cut -f2 -d.`
    cc_vers_patch=`echo $cc_version | cut -f3 -d.`
    test -n "$cc_vers_major" || cc_vers_major=0
    test -n "$cc_vers_minor" || cc_vers_minor=0
    test -n "$cc_vers_patch" || cc_vers_patch=0
fi

if test "X-gcc" = "X-$cc_vendor"; then

    ###############################
    # Architecture-specific flags #
    ###############################

    arch=
    case "$host_os-$host_cpu" in
        # FreeBSD sets the information from "uname -m" to the general machine
        # architecture, not the specific CPU for the machine, so even our
        # Pentium II Xeon server is set to "i386".  Once we know we are on a FreeBSD
        # machine, use the "sysctl" command to get the CPU hardware model.
        freebsd*-i386)
            host_cpu_model=`sysctl -n hw.model`
            case "$host_cpu_model" in
                # Hmm.. this might not catch Celerons, but it won't hurt them either...
                *Pro*|*II*|*III*|*IV*|*Athlon*)
                    # architecture-specific optimizations cause problems
                    # for some users who build binaries to be used on
                    # multiple architectures.
                    # arch="-march=i686"
                ;;
            esac
            ;;

        *-i686)
                    # architecture-specific optimizations cause problems
                    # for some users who build binaries to be used on
                    # multiple architectures.
                    # arch="-march=i686"
            ;;
    esac

    case "$host_os-$host_cpu" in
        # cygwin needs the "-std=c99" flag removed, so make
        # a specific case for Cygwin without the flag and a default
        # case to add the flag everywhere else
        cygwin-*)
            ;;

        *)
            H5_CFLAGS="$H5_CFLAGS -std=c99"
            ;;
    esac

    H5_CFLAGS="$H5_CFLAGS $arch"

    ##############
    # Production #
    ##############

    # NDEBUG is handled explicitly by the configure script
    if test $cc_vers_major -le 4; then
        PROD_CFLAGS=
    else
        PROD_CFLAGS="-fstdarg-opt"
    fi

    #########
    # Debug #
    #########

    # NDEBUG is handled explicitly by the configure script
    # -g is handled by the symbols flags
    if test $cc_vers_major -le 4; then
        DEBUG_CFLAGS=
    else
        DEBUG_CFLAGS="-ftrapv -fno-common"
    fi

    ###########
    # Symbols #
    ###########

    NO_SYMBOLS_CFLAGS="-s"
    SYMBOLS_CFLAGS="-g -fno-omit-frame-pointer"

    #############
    # Profiling #
    #############

    PROFILE_CFLAGS="-pg"

    ################
    # Optimization #
    ################

    if test $cc_vers_major -le 4; then
        HIGH_OPT_CFLAGS="-O3"
        DEBUG_OPT_CFLAGS=
    else
        HIGH_OPT_CFLAGS="-O3"
        DEBUG_OPT_CFLAGS="-Og"
    fi
    NO_OPT_CFLAGS="-O0"

    ############
    # Warnings #
    ############

    ###########
    # General #
    ###########

    # Note that some of the flags listed here really should be developer
    # flags (listed in a separate variable, below) but we put them here
    # because they are not raised by the current code and we'd like to
    # know if they do start showing up.
    #
    # NOTE: Don't add -Wpadded here since we can't/won't fix the (many)
    # warnings that are emitted. If you need it, add it from the
    # environment variable at configure time.
    #
    # NOTE: Disable the -Wformat-nonliteral from -Wformat=2 here and re-add
    # it to the developer flags.
    #
    # NOTE: Due to the divergence in the C and C++, we're dropping support for
    # compiling the C library with a C++ compiler and dropping the -Wc++-compat
    # warning.
    H5_CFLAGS="$H5_CFLAGS $(load_gcc_arguments warnings-general)"
    H5_CFLAGS="$H5_CFLAGS -Wbad-function-cast -Wcast-align"
    H5_CFLAGS="$H5_CFLAGS -Wdeclaration-after-statement -Wdisabled-optimization"
    H5_CFLAGS="$H5_CFLAGS -Wmissing-declarations"
    H5_CFLAGS="$H5_CFLAGS -Wmissing-prototypes -Wnested-externs -Wold-style-definition -Wpacked"
    H5_CFLAGS="$H5_CFLAGS -Wredundant-decls -Wstrict-prototypes -Wswitch-enum -Wswitch-default"
    H5_CFLAGS="$H5_CFLAGS -Wunused-macros -Wunsafe-loop-optimizations"

    ######################
    # Developer warnings #
    ######################

    # (suggestions from gcc, not code problems)
    # NOTE: -Wformat-nonliteral added back in here (from being disabled in H5_CFLAGS)
    NO_DEVELOPER_WARNING_CFLAGS=$(load_gcc_arguments warnings-no-developer-general)
    DEVELOPER_WARNING_CFLAGS=$(load_gcc_arguments warnings-developer-general)

    #######################
    # gcc 4 special cases #
    #######################

    # Disable warnings about using the 'long long' type w/ gcc 4.6 and earlier
    if test $cc_vers_major -eq 4 -a $cc_vers_minor -ge 2 -o $cc_vers_major -eq 4 -a $cc_vers_minor -le 6; then
        H5_CFLAGS="$H5_CFLAGS -Wno-long-long"
    fi

    # -Wvolatile-register-var was later incorporated into -Wall and
    # only needs to be specified explicitly for gcc 4.2-4.3
    if test $cc_vers_major -eq 4 -a $cc_vers_minor -ge 2 -o $cc_vers_major -eq 4 -a $cc_vers_minor -le 3; then
        H5_CFLAGS="$H5_CFLAGS -Wvolatile-register-var"
    fi

    # -Wstrict-aliasing was later incorporated into -Wall and
    # only needs to be specified explicitly for gcc 4.5-4.6
    if test $cc_vers_major -eq 4 -a $cc_vers_minor -ge 5 -o $cc_vers_major -eq 4 -a $cc_vers_minor -le 6; then
        H5_CFLAGS="$H5_CFLAGS -Wstrict-aliasing"
    fi

    # The non-valued form of -Wstrict-overflow is used in gcc 4.2-4.4
    if test $cc_vers_major -eq 4 -a $cc_vers_minor -ge 2 -a $cc_vers_major -eq 4 -a $cc_vers_minor -le 4; then
        H5_CFLAGS="$H5_CFLAGS -Wstrict-overflow"
    fi

    # -Wvla was later incorporated into -Wpedantic and
    # only needs to be specified explicitly for gcc 4
    if test $cc_vers_major -eq 4 -a $cc_vers_minor -ge 2; then
        H5_CFLAGS="$H5_CFLAGS -Wvla"
    fi

    #############################
    # Version-specific warnings #
    #############################

    # gcc 4.3
    if test $cc_vers_major -ge 5 -o $cc_vers_major -eq 4 -a $cc_vers_minor -ge 3; then
        H5_CFLAGS="$H5_CFLAGS -Wlogical-op -Wlarger-than=2560"
    fi

    # gcc 4.4
    if test $cc_vers_major -ge 5 -o $cc_vers_major -eq 4 -a $cc_vers_minor -ge 4; then
        H5_CFLAGS="$H5_CFLAGS -Wsync-nand -Wframe-larger-than=16384 -Wpacked-bitfield-compat"
    fi

    # gcc 4.5
    if test $cc_vers_major -ge 5 -o $cc_vers_major -eq 4 -a $cc_vers_minor -ge 5; then
        H5_CFLAGS="$H5_CFLAGS -Wstrict-overflow=5 -Wjump-misses-init -Wunsuffixed-float-constants"
    fi

    # gcc 4.6
    if test $cc_vers_major -ge 5 -o $cc_vers_major -eq 4 -a $cc_vers_minor -ge 6; then
        H5_CFLAGS="$H5_CFLAGS -Wdouble-promotion -Wtrampolines"
        DEVELOPER_WARNING_CFLAGS="$DEVELOPER_WARNING_CFLAGS -Wsuggest-attribute=const"
        NO_DEVELOPER_WARNING_CFLAGS="$NO_DEVELOPER_WARNING_CFLAGS -Wno-suggest-attribute=const"
    fi

    # gcc 4.7
    if test $cc_vers_major -ge 5 -o $cc_vers_major -eq 4 -a $cc_vers_minor -ge 7; then
        H5_CFLAGS="$H5_CFLAGS -Wstack-usage=8192 -Wvector-operation-performance"
        DEVELOPER_WARNING_CFLAGS="$DEVELOPER_WARNING_CFLAGS -Wsuggest-attribute=pure -Wsuggest-attribute=noreturn"
        NO_DEVELOPER_WARNING_CFLAGS="$NO_DEVELOPER_WARNING_CFLAGS -Wno-suggest-attribute=pure -Wno-suggest-attribute=noreturn"
    fi

    # gcc 4.8
    if test $cc_vers_major -ge 5 -o $cc_vers_major -eq 4 -a $cc_vers_minor -ge 8; then
        DEVELOPER_WARNING_CFLAGS="$DEVELOPER_WARNING_CFLAGS -Wsuggest-attribute=format"
        NO_DEVELOPER_WARNING_CFLAGS="$NO_DEVELOPER_WARNING_CFLAGS -Wno-suggest-attribute=format"
    fi

    # gcc 4.9
    if test $cc_vers_major -ge 5 -o $cc_vers_major -eq 4 -a $cc_vers_minor -ge 9; then
        H5_CFLAGS="$H5_CFLAGS -Wdate-time"
    fi

    # gcc 5
    if test $cc_vers_major -ge 5; then
        H5_CFLAGS="$H5_CFLAGS -Warray-bounds=2 -Wc99-c11-compat"
    fi

    # gcc 6
    if test $cc_vers_major -ge 6; then
        H5_CFLAGS="$H5_CFLAGS -Wnull-dereference -Wunused-const-variable -Wduplicated-cond -Whsa -Wnormalized"
    fi

    # gcc 7
    if test $cc_vers_major -ge 7; then
        DEVELOPER_WARNING_CFLAGS="$DEVELOPER_WARNING_CFLAGS -Wstringop-overflow=2"
        H5_CFLAGS="$H5_CFLAGS -Walloc-zero -Walloca -Wduplicated-branches -Wformat-overflow=2 -Wformat-truncation=2 -Wimplicit-fallthrough=5 -Wrestrict"
    fi

    # gcc 8
    if test $cc_vers_major -ge 8; then
        DEVELOPER_WARNING_CFLAGS="$DEVELOPER_WARNING_CFLAGS -Wstringop-overflow=4 -Wsuggest-attribute=cold -Wsuggest-attribute=malloc"
        NO_DEVELOPER_WARNING_CFLAGS="$NO_DEVELOPER_WARNING_CFLAGS -Wno-suggest-attribute=cold -Wno-suggest-attribute=malloc"
        H5_CFLAGS="$H5_CFLAGS -Wattribute-alias -Wcast-align=strict -Wshift-overflow=2"
    fi

    # gcc 9
    if test $cc_vers_major -ge 9; then
        H5_CFLAGS="$H5_CFLAGS -Wattribute-alias=2 -Wmissing-profile"
    fi

    #################
    # Flags are set #
    #################
    cc_flags_set=yes
fi

# Clear cc info if no flags set
if test "X$cc_flags_set" = "X"; then
    cc_vendor=
    cc_version=
fi
